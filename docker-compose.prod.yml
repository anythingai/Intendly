# Intent-Based Trading Aggregator - Production Environment
# Run with: docker-compose -f docker-compose.prod.yml up -d

version: '3.8'

services:
  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  
  postgres:
    image: postgres:14-alpine
    container_name: intendly-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-intendly}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - intendly-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  redis:
    image: redis:7-alpine
    container_name: intendly-redis-prod
    volumes:
      - redis_data:/data
    networks:
      - intendly-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # =============================================================================
  # BACKEND SERVICES
  # =============================================================================

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: intendly-backend-prod
    environment:
      NODE_ENV: production
      API_PORT: 3001
      WS_PORT: 3002
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      CHAIN_ID: ${CHAIN_ID}
      RPC_URL: ${RPC_URL}
      SETTLEMENT_CONTRACT_ADDRESS: ${SETTLEMENT_CONTRACT_ADDRESS}
      PERMIT2_ADDRESS: ${PERMIT2_ADDRESS}
      ROUTER_ADDRESS: ${ROUTER_ADDRESS}
      JWT_SECRET: ${JWT_SECRET}
      LOG_LEVEL: info
      ENABLE_DEBUG: "false"
      METRICS_ENABLED: "true"
      CORS_ORIGINS: ${CORS_ORIGINS}
    ports:
      - "3001:3001"
      - "3002:3002"
      - "9090:9090"  # Metrics port
    volumes:
      - backend_logs:/app/logs
    networks:
      - intendly-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # LOAD BALANCER
  # =============================================================================

  nginx:
    image: nginx:alpine
    container_name: intendly-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - intendly-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # MONITORING SERVICES
  # =============================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: intendly-prometheus-prod
    volumes:
      - ./monitoring/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - intendly-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  grafana:
    image: grafana/grafana:latest
    container_name: intendly-grafana-prod
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL}
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/prod:/etc/grafana/provisioning
    networks:
      - intendly-network
    restart: unless-stopped
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # =============================================================================
  # LOG AGGREGATION
  # =============================================================================

  loki:
    image: grafana/loki:latest
    container_name: intendly-loki-prod
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - intendly-network
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:latest
    container_name: intendly-promtail-prod
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - backend_logs:/var/log/backend:ro
      - nginx_logs:/var/log/nginx:ro
    networks:
      - intendly-network
    restart: unless-stopped
    depends_on:
      - loki
    command: -config.file=/etc/promtail/config.yml

# =============================================================================
# NETWORKS
# =============================================================================

networks:
  intendly-network:
    driver: bridge
    name: intendly-prod-network

# =============================================================================
# VOLUMES
# =============================================================================

volumes:
  postgres_data:
    name: intendly-postgres-prod-data
  redis_data:
    name: intendly-redis-prod-data
  backend_logs:
    name: intendly-backend-prod-logs
  nginx_logs:
    name: intendly-nginx-prod-logs
  prometheus_data:
    name: intendly-prometheus-prod-data
  grafana_data:
    name: intendly-grafana-prod-data
  loki_data:
    name: intendly-loki-prod-data