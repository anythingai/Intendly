name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *' # Run nightly tests at 2 AM UTC

env:
  NODE_VERSION: '18'
  FOUNDRY_PROFILE: ci

jobs:
  # Unit Tests - Fast feedback
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [contracts, backend, solver-sdk, web]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup Foundry (for contracts)
        if: matrix.component == 'contracts'
        uses: foundry-rs/foundry-toolchain@v1
      
      - name: Install dependencies
        run: |
          cd ${{ matrix.component }}
          npm ci
      
      - name: Run unit tests
        run: |
          cd ${{ matrix.component }}
          if [ "${{ matrix.component }}" = "contracts" ]; then
            forge test
          else
            npm run test:unit
          fi
      
      - name: Generate coverage report
        if: matrix.component != 'contracts'
        run: |
          cd ${{ matrix.component }}
          npm run test:coverage
      
      - name: Upload coverage to Codecov
        if: matrix.component != 'contracts'
        uses: codecov/codecov-action@v3
        with:
          directory: ${{ matrix.component }}/coverage
          flags: ${{ matrix.component }}

  # Smart Contract Security Tests
  contract-security:
    name: Contract Security Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1
      
      - name: Install dependencies
        run: |
          cd contracts
          forge install
      
      - name: Run security tests
        run: |
          cd contracts
          forge test --match-contract "*Security*"
      
      - name: Run fuzz tests
        run: |
          cd contracts
          forge test --fuzz-runs 10000
      
      - name: Generate gas report
        run: |
          cd contracts
          forge test --gas-report > gas-report.txt
      
      - name: Upload gas report
        uses: actions/upload-artifact@v3
        with:
          name: gas-report
          path: contracts/gas-report.txt

  # Integration Tests - Requires services
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: intendly_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1
      
      - name: Install dependencies
        run: |
          npm ci
          cd tests && npm ci
      
      - name: Start Anvil blockchain
        run: |
          anvil --host 0.0.0.0 --accounts 20 --balance 10000 &
          sleep 5
      
      - name: Deploy test contracts
        run: |
          cd contracts
          forge script script/Deploy.s.sol --rpc-url http://localhost:8545 --broadcast --private-key 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80
      
      - name: Start backend services
        run: |
          cd backend
          npm run build
          npm run start:relayer &
          npm run start:coordinator &
          npm run start:websocket &
          sleep 10
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: intendly_test
          DB_USER: test_user
          DB_PASSWORD: test_password
          REDIS_URL: redis://localhost:6379
          BLOCKCHAIN_RPC_URL: http://localhost:8545
      
      - name: Run database migrations
        run: |
          cd backend
          npm run db:migrate
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: intendly_test
          DB_USER: test_user
          DB_PASSWORD: test_password
      
      - name: Run integration tests
        run: |
          cd tests
          npm run test:integration
        env:
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
          TEST_DB_NAME: intendly_test
          TEST_DB_USER: test_user
          TEST_DB_PASSWORD: test_password
          TEST_REDIS_URL: redis://localhost:6379
          TEST_BLOCKCHAIN_RPC_URL: http://localhost:8545
          TEST_RELAYER_URL: http://localhost:3001
          TEST_COORDINATOR_URL: http://localhost:3002
          TEST_WS_URL: ws://localhost:3003
      
      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: tests/coverage/

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          cd tests && npm ci
      
      - name: Install Playwright browsers
        run: |
          cd tests
          npx playwright install chromium firefox webkit
      
      - name: Start test environment
        run: |
          cd tests
          npm run setup
          sleep 30
      
      - name: Build and start frontend
        run: |
          cd web
          npm run build
          npm run start &
          sleep 10
      
      - name: Run E2E tests
        run: |
          cd tests
          npm run test:e2e
      
      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results
          path: tests/e2e/test-results/
      
      - name: Upload E2E screenshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-screenshots
          path: tests/e2e/test-results/screenshots/

  # Performance and Load Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install Artillery
        run: npm install -g artillery@latest
      
      - name: Start test environment
        run: |
          cd tests
          npm run setup
          sleep 30
      
      - name: Run load tests
        run: |
          cd tests
          npm run test:load
      
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: tests/performance/results/

  # Demo Validation Tests
  demo-validation:
    name: Demo Validation
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          cd tests && npm ci
      
      - name: Start complete test environment
        run: |
          cd tests
          npm run setup
          sleep 45
      
      - name: Run demo validation tests
        run: |
          cd tests
          npm run test:demo
      
      - name: Validate PRD requirements
        run: |
          cd tests
          npm run validate:prd
      
      - name: Upload demo results
        uses: actions/upload-artifact@v3
        with:
          name: demo-validation-results
          path: tests/demo/results/

  # Security Scans
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        run: npm audit --audit-level=moderate
      
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium
      
      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1
      
      - name: Run Slither analysis (if available)
        continue-on-error: true
        run: |
          pip install slither-analyzer
          cd contracts
          slither . --print human-summary

  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, contract-security, integration-tests, e2e-tests, demo-validation]
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      
      - name: Generate test summary
        run: |
          echo "# Test Results Summary" > test-summary.md
          echo "" >> test-summary.md
          
          echo "## Unit Tests" >> test-summary.md
          if [ "${{ needs.unit-tests.result }}" = "success" ]; then
            echo "✅ Unit tests passed" >> test-summary.md
          else
            echo "❌ Unit tests failed" >> test-summary.md
          fi
          
          echo "## Integration Tests" >> test-summary.md
          if [ "${{ needs.integration-tests.result }}" = "success" ]; then
            echo "✅ Integration tests passed" >> test-summary.md
          else
            echo "❌ Integration tests failed" >> test-summary.md
          fi
          
          echo "## E2E Tests" >> test-summary.md
          if [ "${{ needs.e2e-tests.result }}" = "success" ]; then
            echo "✅ E2E tests passed" >> test-summary.md
          else
            echo "❌ E2E tests failed" >> test-summary.md
          fi
          
          echo "## Demo Validation" >> test-summary.md
          if [ "${{ needs.demo-validation.result }}" = "success" ]; then
            echo "✅ Demo validation passed" >> test-summary.md
          else
            echo "❌ Demo validation failed" >> test-summary.md
          fi
      
      - name: Upload test summary
        uses: actions/upload-artifact@v3
        with:
          name: test-summary
          path: test-summary.md
      
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: always()
    steps:
      - name: Cleanup test environment
        run: |
          # Cleanup any remaining processes or resources
          echo "Cleaning up test environment"
          # Stop any running services
          pkill -f "anvil" || true
          pkill -f "node" || true